// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PAFCpp
List PAFCpp(arma::mat Cor_Matrix, int N_Factors, int Max_Iter, double Criterion);
RcppExport SEXP _EFAfactors_PAFCpp(SEXP Cor_MatrixSEXP, SEXP N_FactorsSEXP, SEXP Max_IterSEXP, SEXP CriterionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Cor_Matrix(Cor_MatrixSEXP);
    Rcpp::traits::input_parameter< int >::type N_Factors(N_FactorsSEXP);
    Rcpp::traits::input_parameter< int >::type Max_Iter(Max_IterSEXP);
    Rcpp::traits::input_parameter< double >::type Criterion(CriterionSEXP);
    rcpp_result_gen = Rcpp::wrap(PAFCpp(Cor_Matrix, N_Factors, Max_Iter, Criterion));
    return rcpp_result_gen;
END_RCPP
}
// calculateData
NumericMatrix calculateData(int k, const NumericMatrix& Shared_Comp, const NumericMatrix& Shared_Load, const NumericMatrix& Unique_Comp, const NumericMatrix& Unique_Load);
RcppExport SEXP _EFAfactors_calculateData(SEXP kSEXP, SEXP Shared_CompSEXP, SEXP Shared_LoadSEXP, SEXP Unique_CompSEXP, SEXP Unique_LoadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Shared_Comp(Shared_CompSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Shared_Load(Shared_LoadSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Unique_Comp(Unique_CompSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type Unique_Load(Unique_LoadSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateData(k, Shared_Comp, Shared_Load, Unique_Comp, Unique_Load));
    return rcpp_result_gen;
END_RCPP
}
// calculateRMSE
arma::mat calculateRMSE(arma::mat Pop, arma::vec EigsData, int NSamples, int NPop, int N);
RcppExport SEXP _EFAfactors_calculateRMSE(SEXP PopSEXP, SEXP EigsDataSEXP, SEXP NSamplesSEXP, SEXP NPopSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Pop(PopSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type EigsData(EigsDataSEXP);
    Rcpp::traits::input_parameter< int >::type NSamples(NSamplesSEXP);
    Rcpp::traits::input_parameter< int >::type NPop(NPopSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateRMSE(Pop, EigsData, NSamples, NPop, N));
    return rcpp_result_gen;
END_RCPP
}
// generateDistributions
NumericMatrix generateDistributions(const NumericMatrix& suppliedData, int I, int Npop);
RcppExport SEXP _EFAfactors_generateDistributions(SEXP suppliedDataSEXP, SEXP ISEXP, SEXP NpopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type suppliedData(suppliedDataSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type Npop(NpopSEXP);
    rcpp_result_gen = Rcpp::wrap(generateDistributions(suppliedData, I, Npop));
    return rcpp_result_gen;
END_RCPP
}
// sampleResponse
NumericMatrix sampleResponse(const NumericMatrix& response, int N, int I);
RcppExport SEXP _EFAfactors_sampleResponse(SEXP responseSEXP, SEXP NSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(sampleResponse(response, N, I));
    return rcpp_result_gen;
END_RCPP
}
// sortData
Rcpp::NumericMatrix sortData(NumericMatrix Data, NumericMatrix Distributions);
RcppExport SEXP _EFAfactors_sortData(SEXP DataSEXP, SEXP DistributionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Distributions(DistributionsSEXP);
    rcpp_result_gen = Rcpp::wrap(sortData(Data, Distributions));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EFAfactors_PAFCpp", (DL_FUNC) &_EFAfactors_PAFCpp, 4},
    {"_EFAfactors_calculateData", (DL_FUNC) &_EFAfactors_calculateData, 5},
    {"_EFAfactors_calculateRMSE", (DL_FUNC) &_EFAfactors_calculateRMSE, 5},
    {"_EFAfactors_generateDistributions", (DL_FUNC) &_EFAfactors_generateDistributions, 3},
    {"_EFAfactors_sampleResponse", (DL_FUNC) &_EFAfactors_sampleResponse, 3},
    {"_EFAfactors_sortData", (DL_FUNC) &_EFAfactors_sortData, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_EFAfactors(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
